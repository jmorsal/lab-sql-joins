-- 1 List the number of films per category.
use sakila;

select title, category.name
from film
left join film_category
on film.film_id = film_category.film_id
left join category
on film_category.category_id = category.category_id;

-- 2 Retrieve the store ID, city, and country for each store.
SELECT s.store_id, c.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city c ON a.city_id = c.city_id
JOIN country co ON c.country_id = co.country_id;

-- 3 Calculate the total revenue generated by each store in dollars.

SELECT 
    s.store_id,
    SUM(p.amount) AS total_revenue
FROM payment p
JOIN customer c ON p.customer_id = c.customer_id
JOIN store s ON c.store_id = s.store_id
GROUP BY s.store_id;

-- 4 Determine the average running time of films for each category.

SELECT c.name AS category, AVG(f.length) AS average_running_time
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;

-- 5 Identify the film categories with the longest average running time.

SELECT c.name AS category, AVG(f.length) AS average_running_time
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY average_running_time DESC;


-- 6 Display the top 10 most frequently rented movies in descending order.

SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;


-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.


SELECT f.title, i.inventory_id, s.store_id, c.city
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN store s ON i.store_id = s.store_id
JOIN address a ON s.address_id = a.address_id
JOIN city c ON a.city_id = c.city_id
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1 AND i.inventory_id NOT IN (SELECT inventory_id FROM rental WHERE return_date IS NULL);

-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT f.title, 
       CASE 
           WHEN IFNULL(COUNT(i.inventory_id), 0) > 0 AND COUNT(r.rental_id) = 0 THEN 'Available'
           ELSE 'NOT Available'
       END AS availability
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
LEFT JOIN rental r ON i.inventory_id = r.inventory_id AND r.return_date IS NULL
GROUP BY f.title;





